import { MeditationHistory, MeditationRecord } from '@/types/types';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { apiClient } from './api';

interface CreateRecordRequest {
    meditationId: string;
    value: number;
}

class SyncService {
    private syncInProgress: boolean = false;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    async addMeditationRecord(meditationId: string, count: number, userId: string): Promise<MeditationRecord> {
        try {
            // 1. –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
            const record: MeditationRecord = {
                id: this.generateUUID(),
                count,
                timestamp: Date.now(),
                synced: false,
            };

            // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            const history = await this.getLocalHistory();
            const newHistory = {
                ...history,
                [meditationId]: [...(history[meditationId] || []), record],
            };
            await this.saveLocalHistory(newHistory);

            // 3. –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            await this.syncRecordToServer(record, meditationId, userId);

            return record;
        } catch (error) {
            console.error('Error adding meditation record:', error);
            throw error;
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    private async syncRecordToServer(record: MeditationRecord, meditationId: string, userId: string) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è API
            const request: CreateRecordRequest = {
                meditationId,
                value: record.count, // API –æ–∂–∏–¥–∞–µ—Ç value
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await apiClient.createMeditationRecord(request);

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
            record.synced = true;
            record.serverId = response.data.id;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await this.updateLocalRecord(meditationId, record);

            console.log('‚úÖ Record synced successfully:', record.id);
        } catch (error) {
            console.error('‚ùå Failed to sync record:', error);
            // –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–º–µ—á–µ–Ω–Ω–æ–π –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
            // –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    private async updateLocalRecord(meditationId: string, updatedRecord: MeditationRecord) {
        const history = await this.getLocalHistory();
        const meditationRecords = history[meditationId];

        if (meditationRecords) {
            const recordIndex = meditationRecords.findIndex(r => r.id === updatedRecord.id);
            if (recordIndex !== -1) {
                meditationRecords[recordIndex] = updatedRecord;
                await this.saveLocalHistory(history);
            }
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    async syncAllPendingRecords(userId: string) {
        if (this.syncInProgress) return;

        this.syncInProgress = true;
        console.log('üîÑ Starting sync of all pending records...');

        try {
            const history = await this.getLocalHistory();
            const pendingRecords: { record: MeditationRecord; meditationId: string }[] = [];

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            Object.entries(history).forEach(([meditationId, records]) => {
                records.forEach(record => {
                    if (!record.synced) {
                        pendingRecords.push({ record, meditationId });
                    }
                });
            });

            console.log(`Found ${pendingRecords.length} pending records to sync`);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
            for (const { record, meditationId } of pendingRecords) {
                await this.syncRecordToServer(record, meditationId, userId);
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            console.log('‚úÖ All pending records synced');
        } catch (error) {
            console.error('‚ùå Sync failed:', error);
        } finally {
            this.syncInProgress = false;
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    private async getLocalHistory(): Promise<MeditationHistory> {
        try {
            const savedHistory = await AsyncStorage.getItem('meditationHistory');
            return savedHistory ? JSON.parse(savedHistory) : {};
        } catch (error) {
            console.error('Failed to get local history:', error);
            return {};
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    private async saveLocalHistory(history: MeditationHistory) {
        try {
            await AsyncStorage.setItem('meditationHistory', JSON.stringify(history));
        } catch (error) {
            console.error('Failed to save local history:', error);
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID
    private generateUUID(): string {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    async getSyncStatus() {
        const history = await this.getLocalHistory();
        let pendingCount = 0;

        Object.values(history).forEach(records => {
            records.forEach(record => {
                if (!record.synced) pendingCount++;
            });
        });

        return {
            totalRecords: Object.values(history).flat().length,
            pendingRecords: pendingCount,
            syncedRecords: Object.values(history).flat().filter(r => r.synced).length,
        };
    }
}

export const syncService = new SyncService();
